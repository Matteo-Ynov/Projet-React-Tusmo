{"ast":null,"code":"import _slicedToArray from \"/home/matteo/Desktop/Projet-React-Tusmo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/matteo/Desktop/Projet-React-Tusmo/src/components/grid.jsx\";\n\nimport { Row } from \"./row\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { SutomContext } from \"../states/sutomProvider\";\nimport { TYPE, CONFIRM } from \"../states/wordsReducer\";\nimport WinPanel from \"../components/winPanel\";\nimport LosePanel from \"../components/losePanel\";\nimport { checkIfWordExist } from \"../engine\";\nexport var Grid = function Grid() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  var _useContext = useContext(SutomContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      state = _useContext2[0],\n      dispatch = _useContext2[1];\n\n  var keyDown = function keyDown(event) {\n    if (state.won === undefined) {\n      setPressed(pressed + 1);\n\n      if (event.key.toLowerCase() === \"enter\" && state.currentTry.length === state.wordLength) {\n        checkIfWordExist(state.currentTry).then(function (res) {\n          console.log(res);\n\n          if (res) {\n            dispatch({\n              type: CONFIRM\n            });\n          }\n        });\n      } else {\n        dispatch({\n          type: TYPE,\n          payload: event.key.toLowerCase()\n        });\n      }\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"keydown\", keyDown);\n    return function () {\n      window.removeEventListener(\"keydown\", keyDown);\n    };\n  });\n\n  if (state.won) {\n    return /*#__PURE__*/React.createElement(WinPanel, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }\n    });\n  } else if (state.won === false) {\n    return /*#__PURE__*/React.createElement(LosePanel, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, Array(6).fill(1).map(function (_, i) {\n      return /*#__PURE__*/React.createElement(Row, {\n        word: state.tries[i] ? state.tries[i] : \" \".repeat(state.wordToFind.length),\n        key: i,\n        id: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }\n      });\n    }));\n  }\n};","map":{"version":3,"sources":["/home/matteo/Desktop/Projet-React-Tusmo/src/components/grid.jsx"],"names":["Row","React","useContext","useEffect","useState","SutomContext","TYPE","CONFIRM","WinPanel","LosePanel","checkIfWordExist","Grid","pressed","setPressed","state","dispatch","keyDown","event","won","undefined","key","toLowerCase","currentTry","length","wordLength","then","res","console","log","type","payload","window","addEventListener","removeEventListener","Array","fill","map","_","i","tries","repeat","wordToFind"],"mappings":";;;;;AAAA,SAASA,GAAT,QAAoB,OAApB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AAEA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,wBAA9B;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,SAASC,gBAAT,QAAiC,WAAjC;AAEA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,kBACMP,QAAQ,CAAC,CAAD,CADd;AAAA;AAAA,MACjBQ,OADiB;AAAA,MACRC,UADQ;;AAAA,oBAEEX,UAAU,CAACG,YAAD,CAFZ;AAAA;AAAA,MAEjBS,KAFiB;AAAA,MAEVC,QAFU;;AAIxB,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,QAAIH,KAAK,CAACI,GAAN,KAAcC,SAAlB,EAA6B;AAC3BN,MAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;;AAEA,UACEK,KAAK,CAACG,GAAN,CAAUC,WAAV,OAA4B,OAA5B,IACAP,KAAK,CAACQ,UAAN,CAAiBC,MAAjB,KAA4BT,KAAK,CAACU,UAFpC,EAGE;AACAd,QAAAA,gBAAgB,CAACI,KAAK,CAACQ,UAAP,CAAhB,CAAmCG,IAAnC,CAAwC,UAACC,GAAD,EAAS;AAC/CC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,cAAIA,GAAJ,EAAS;AACPX,YAAAA,QAAQ,CAAC;AACPc,cAAAA,IAAI,EAAEtB;AADC,aAAD,CAAR;AAGD;AACF,SAPD;AAQD,OAZD,MAYO;AACLQ,QAAAA,QAAQ,CAAC;AACPc,UAAAA,IAAI,EAAEvB,IADC;AAEPwB,UAAAA,OAAO,EAAEb,KAAK,CAACG,GAAN,CAAUC,WAAV;AAFF,SAAD,CAAR;AAID;AACF;AACF,GAvBD;;AAyBAlB,EAAAA,SAAS,CAAC,YAAM;AACd4B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmChB,OAAnC;AAEA,WAAO,YAAM;AACXe,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCjB,OAAtC;AACD,KAFD;AAGD,GANQ,CAAT;;AAQA,MAAIF,KAAK,CAACI,GAAV,EAAe;AACb,wBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO,IAAIJ,KAAK,CAACI,GAAN,KAAc,KAAlB,EAAyB;AAC9B,wBAAO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFM,MAEA;AACL,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGgB,KAAK,CAAC,CAAD,CAAL,CACEC,IADF,CACO,CADP,EAEEC,GAFF,CAEM,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACb,0BACE,oBAAC,GAAD;AACE,QAAA,IAAI,EACFxB,KAAK,CAACyB,KAAN,CAAYD,CAAZ,IACIxB,KAAK,CAACyB,KAAN,CAAYD,CAAZ,CADJ,GAEI,IAAIE,MAAJ,CAAW1B,KAAK,CAAC2B,UAAN,CAAiBlB,MAA5B,CAJR;AAME,QAAA,GAAG,EAAEe,CANP;AAOE,QAAA,EAAE,EAAEA,CAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD,KAdF,CADH,CADF;AAmBD;AACF,CA9DM","sourcesContent":["import { Row } from \"./row\";\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport { SutomContext } from \"../states/sutomProvider\";\nimport { TYPE, CONFIRM } from \"../states/wordsReducer\";\n\nimport WinPanel from \"../components/winPanel\";\nimport LosePanel from \"../components/losePanel\";\n\nimport { checkIfWordExist } from \"../engine\";\n\nexport const Grid = () => {\n  const [pressed, setPressed] = useState(0);\n  const [state, dispatch] = useContext(SutomContext);\n\n  const keyDown = (event) => {\n    if (state.won === undefined) {\n      setPressed(pressed + 1);\n\n      if (\n        event.key.toLowerCase() === \"enter\" &&\n        state.currentTry.length === state.wordLength\n      ) {\n        checkIfWordExist(state.currentTry).then((res) => {\n          console.log(res);\n          if (res) {\n            dispatch({\n              type: CONFIRM,\n            });\n          }\n        });\n      } else {\n        dispatch({\n          type: TYPE,\n          payload: event.key.toLowerCase(),\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", keyDown);\n    };\n  });\n\n  if (state.won) {\n    return <WinPanel />;\n  } else if (state.won === false) {\n    return <LosePanel />;\n  } else {\n    return (\n      <div className=\"grid\">\n        {Array(6)\n          .fill(1)\n          .map((_, i) => {\n            return (\n              <Row\n                word={\n                  state.tries[i]\n                    ? state.tries[i]\n                    : \" \".repeat(state.wordToFind.length)\n                }\n                key={i}\n                id={i}\n              />\n            );\n          })}\n      </div>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}