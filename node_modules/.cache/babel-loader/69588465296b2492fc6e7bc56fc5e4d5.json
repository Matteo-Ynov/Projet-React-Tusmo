{"ast":null,"code":"import _objectSpread from \"/home/matteo/Desktop/Projet-React-Tusmo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport wordList from \"../assets/words.json\";\nimport { getHints } from \"../engine.js\";\nexport var SET_WORD_TO_FIND = \"SET_WORD_TO_FIND\";\nexport var TYPE = \"TYPE\";\nexport var RESET = \"RESET\";\nexport var CONFIRM = \"CONFIRM\";\nvar ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\nvar lengthWord = randomNum(5, 10);\nvar words = wordList[lengthWord];\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nvar generateNewState = function generateNewState() {\n  var choosenWord = words[Math.floor(Math.random() * words.length)].normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toUpperCase();\n  return {\n    wordToFind: choosenWord,\n    tries: [],\n    hints: [],\n    currentTry: \"\",\n    letterPlacement: choosenWord[0] + \".\".repeat(choosenWord.length - 1),\n    wordLength: choosenWord.length,\n    won: undefined\n  };\n};\n\nexport var initialState = generateNewState();\nexport var wordsReducer = function wordsReducer(state, action) {\n  switch (action.type) {\n    case RESET:\n      return generateNewState();\n\n    case SET_WORD_TO_FIND:\n      return _objectSpread({}, state, {\n        wordToFind: action.payload\n      });\n\n    case TYPE:\n      if (ALPHABET.includes(action.payload) && state.currentTry.length < state.wordLength) {\n        if (state.currentTry.length === 0 && action.payload.toUpperCase() !== state.wordToFind[0]) {\n          state.currentTry += state.wordToFind[0];\n          state.currentTry += action.payload.toUpperCase();\n        } else {\n          state.currentTry += action.payload.toUpperCase();\n        }\n      } else if (action.payload === \"backspace\" && state.currentTry.length > 0) {\n        state.currentTry = state.currentTry.slice(0, -1);\n      }\n\n      return _objectSpread({}, state);\n\n    case CONFIRM:\n      state.tries.push(state.currentTry);\n      state.hints.push(getHints(state.wordToFind, state.currentTry));\n\n      for (var i = 0; i < state.hints[state.hints.length - 1].length; i++) {\n        if (state.hints[state.hints.length - 1][i] === \"well-placed\") {\n          state.letterPlacement = state.letterPlacement.split(\"\");\n          state.letterPlacement[i] = state.wordToFind[i];\n          state.letterPlacement = state.letterPlacement.join(\"\");\n        }\n      }\n\n      if (state.currentTry === state.wordToFind) {\n        state.won = true;\n      } else if (state.tries.length === 6) {\n        state.won = false;\n      }\n\n      state.currentTry = \"\";\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/matteo/Desktop/Projet-React-Tusmo/src/states/wordsReducer.js"],"names":["wordList","getHints","SET_WORD_TO_FIND","TYPE","RESET","CONFIRM","ALPHABET","lengthWord","randomNum","words","min","max","Math","floor","random","generateNewState","choosenWord","length","normalize","replace","toUpperCase","wordToFind","tries","hints","currentTry","letterPlacement","repeat","wordLength","won","undefined","initialState","wordsReducer","state","action","type","payload","includes","slice","push","i","split","join"],"mappings":"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","sourcesContent":["import wordList from \"../assets/words.json\";\nimport { getHints } from \"../engine.js\";\n\nexport const SET_WORD_TO_FIND = \"SET_WORD_TO_FIND\";\nexport const TYPE = \"TYPE\";\nexport const RESET = \"RESET\";\nexport const CONFIRM = \"CONFIRM\";\n\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\n\nvar lengthWord = randomNum(5, 10);\nvar words = wordList[lengthWord];\n\nfunction randomNum(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nconst generateNewState = () => {\n    var choosenWord = words[Math.floor(Math.random() * words.length)]\n        .normalize(\"NFD\")\n        .replace(/[\\u0300-\\u036f]/g, \"\")\n        .toUpperCase();\n    return {\n        wordToFind: choosenWord,\n        tries: [],\n        hints: [],\n        currentTry: \"\",\n        letterPlacement: choosenWord[0] + \".\".repeat(choosenWord.length - 1),\n        wordLength: choosenWord.length,\n        won: undefined,\n    };\n};\n\nexport const initialState = generateNewState();\n\nexport const wordsReducer = (state, action) => {\n    switch (action.type) {\n        case RESET:\n            return generateNewState();\n        case SET_WORD_TO_FIND:\n            return {\n                ...state,\n                wordToFind: action.payload,\n            };\n        case TYPE:\n            if (\n                ALPHABET.includes(action.payload) &&\n                state.currentTry.length < state.wordLength\n            ) {\n                if (\n                    state.currentTry.length === 0 &&\n                    action.payload.toUpperCase() !== state.wordToFind[0]\n                ) {\n                    state.currentTry += state.wordToFind[0];\n                    state.currentTry += action.payload.toUpperCase();\n                } else {\n                    state.currentTry += action.payload.toUpperCase();\n                }\n            } else if (\n                action.payload === \"backspace\" &&\n                state.currentTry.length > 0\n            ) {\n                state.currentTry = state.currentTry.slice(0, -1);\n            }\n\n            return {\n                ...state,\n            };\n\n        case CONFIRM:\n            state.tries.push(state.currentTry);\n            state.hints.push(getHints(state.wordToFind, state.currentTry));\n            for (let i = 0; i < state.hints[state.hints.length - 1].length; i++) {\n                if (state.hints[state.hints.length - 1][i] === \"well-placed\") {\n                    state.letterPlacement = state.letterPlacement.split(\"\");\n                    state.letterPlacement[i] = state.wordToFind[i];\n                    state.letterPlacement = state.letterPlacement.join(\"\");\n                }\n            }\n            if (state.currentTry === state.wordToFind) {\n                state.won = true;\n            } else if (state.tries.length === 6) {\n                state.won = false;\n            }\n            state.currentTry = \"\";\n            return {\n                ...state,\n            };\n        default:\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}